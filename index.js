

const express = require('express')
const res = require('express/lib/response')
const path = require('path')
const { redirect } = require('express/lib/response')
const PORT = process.env.PORT || 5000
const bcrypt = require('bcrypt')
const flash = require('express-flash')
const session = require('express-session')

const app = express()

//allow app to find to find pages
app.use(express.static(path.join(__dirname, 'public')))
app.set('views', path.join(__dirname, 'views'))
app.set('view engine', 'ejs')



//passport set up
const users = []
const passport = require('passport')




const LocalStrategy = require('passport-local').Strategy

function startPassport(passport, getUserByName, getUserById){
  const authenticateUser = async (name,password, done) => {
      const user = getUserByName(name)
      if (user == null){
          return done(null, false, {message: 'No user with that username'})
      }
      try{
          if (await bcrypt.compare(password, user.password)){
              return done(null, user)
          }else{
              return done(null, false, {message: 'Incorrect password'})
          }
      }catch(e){
          return done(e)
      }
  }
  passport.use(new LocalStrategy({ usernameField: 'name'}, authenticateUser))
  passport.serializeUser((user, done) => done(null, user.id))
  passport.deserializeUser((id, done) => {
      return done(null, getUserById(id))
  })
}

startPassport(
  passport,
  name => users.find(user => user.name === name),
  id => 
  users.find(user => user.id === id)
)



app.use(express.urlencoded({extended: false}))
app.use(flash())
app.use(session({
  secret: "secret",
  resave: false,
  saveUninitialized: false
}))
app.use(passport.initialize())
app.use(passport.session())

//base homepage code
app.get('/', checkAuthentication, (req, res) => res.render('pages/homepage'))


//outdated update code
app.post('/update', (req, res) => {
  var getUserQuery = req.body.code;
  console.log(getUserQuery);
  pool.query(getUserQuery, (error, result) => {
    if (error)
      res.end(error);
    res.sendStatus(200);
  })
})

//registration code
app.get('/register',  (req, res) => {
  res.render('pages/register.ejs')
})
app.post('/register', async (req, res) => {//i need to change this so it adds it to the database
  try{
    const encryptedPassword = await bcrypt.hash(req.body.password,5);
    users.push({
      id: Date.now().toString(),//autogenerated in database aka remove this
      name: req.body.name,
      password: encryptedPassword
    })
    res.redirect('/login')
  }catch{
    res.redirect('/register')
  }
  console.log(users)
})


//login code
app.get('/login', (req, res) => {
  res.render('pages/login.ejs')
})
app.post('/login', passport.authenticate('local', {
  successRedirect: '/',
  failureRedirect: 'login',
  failureFlash: true
}))

function checkAuthentication(req, res, next){
  if (req.isAuthenticated()){
    return next();
  }
  res.redirect('/login')
}

app.listen(PORT, () => console.log(`Listening on ${ PORT }`))